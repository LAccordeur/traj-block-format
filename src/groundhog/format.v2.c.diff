diff --git a/src/groundhog/traj_block_format.c b/src/groundhog/traj_block_format.c
index adab7a4..e2a6334 100644
--- a/src/groundhog/traj_block_format.c
+++ b/src/groundhog/traj_block_format.c
@@ -10,6 +10,7 @@
 #include "groundhog/log.h"
 #include "groundhog/common_util.h"
 #include "groundhog/config.h"
+#include "groundhog/bloom/bloom.h"
 //#define size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)->Attribute)
 
 static const int OID_SIZE = size_of_attribute(struct traj_point, oid);
@@ -30,6 +31,7 @@ static const int TIME_MIN_SIZE = size_of_attribute(struct seg_meta, time_min);
 static const int TIME_MAX_SIZE = size_of_attribute(struct seg_meta, time_max);
 static const int SEG_OFFSET_SIZE = size_of_attribute(struct seg_meta, seg_offset);
 static const int SEG_SIZE_SIZE = size_of_attribute(struct seg_meta, seg_size);
+static const int OID_FILTER_SIZE = MY_OID_FILTER_SIZE;  // the unit is byte (8 bits)
 static const int LON_MIN_OFFSET = 0;
 static const int LON_MAX_OFFSET = LON_MIN_OFFSET + LON_MIN_SIZE;
 static const int LAT_MIN_OFFSET = LON_MAX_OFFSET + LON_MAX_SIZE;
@@ -38,7 +40,8 @@ static const int TIME_MIN_OFFSET = LAT_MAX_OFFSET + LAT_MAX_SIZE;
 static const int TIME_MAX_OFFSET = TIME_MIN_OFFSET + TIME_MIN_SIZE;
 static const int SEG_OFFSET_OFFSET = TIME_MAX_OFFSET + TIME_MAX_SIZE;
 static const int SEG_SIZE_OFFSET = SEG_OFFSET_OFFSET + SEG_OFFSET_SIZE;
-static const int SEG_META_SIZE = LON_MIN_SIZE + LON_MAX_SIZE + LAT_MIN_SIZE + LAT_MAX_SIZE + TIME_MIN_SIZE + TIME_MAX_SIZE + SEG_OFFSET_SIZE + SEG_SIZE_SIZE;
+static const int OID_FILTER_OFFSET = SEG_SIZE_OFFSET + SEG_SIZE_SIZE;
+static const int SEG_META_SIZE = LON_MIN_SIZE + LON_MAX_SIZE + LAT_MIN_SIZE + LAT_MAX_SIZE + TIME_MIN_SIZE + TIME_MAX_SIZE + SEG_OFFSET_SIZE + SEG_SIZE_SIZE + OID_FILTER_SIZE;
 
 static const int HEADER_SEG_COUNT_SIZE = size_of_attribute(struct traj_block_header, seg_count) + size_of_attribute(struct traj_block_header, alignment_field);
 static const int HEADER_SEG_COUNT_OFFSET = 0;
@@ -85,6 +88,7 @@ void serialize_seg_meta(struct seg_meta* source, void* destination) {
     memcpy(d + TIME_MAX_OFFSET, &(source->time_max), TIME_MAX_SIZE);
     memcpy(d + SEG_OFFSET_OFFSET, &(source->seg_offset), SEG_OFFSET_SIZE);
     memcpy(d + SEG_SIZE_OFFSET, &(source->seg_size), SEG_SIZE_SIZE);
+    memcpy(d + OID_FILTER_OFFSET, source->oid_filter, OID_FILTER_SIZE);
 }
 
 void deserialize_seg_meta(void* source, struct seg_meta* destination) {
@@ -97,6 +101,7 @@ void deserialize_seg_meta(void* source, struct seg_meta* destination) {
     memcpy(&(destination->time_max), s + TIME_MAX_OFFSET, TIME_MAX_SIZE);
     memcpy(&(destination->seg_offset), s + SEG_OFFSET_OFFSET, SEG_OFFSET_SIZE);
     memcpy(&(destination->seg_size), s + SEG_SIZE_OFFSET, SEG_SIZE_SIZE);
+    memcpy(destination->oid_filter, s + OID_FILTER_OFFSET, OID_FILTER_SIZE);
 }
 
 struct traj_point** allocate_points_memory(int array_size) {
@@ -151,9 +156,13 @@ void init_seg_meta(struct seg_meta *meta) {
     meta->lat_max = 0;
     meta->time_min = INT_MAX;
     meta->time_max = 0;
+    meta->oid_filter_size = OID_FILTER_SIZE;
+    memset(meta->oid_filter, 0, OID_FILTER_SIZE);
 }
 
 void extract_spatiotemporal_seg_meta(struct traj_point **points, int array_size, struct seg_meta *meta) {
+    bloom_filter *filter = bloom_filter_new_default(OID_FILTER_SIZE * 8);
+
     struct traj_point *point;
     for (int i = 0; i < array_size; i++) {
         point = points[i];
@@ -176,7 +185,11 @@ void extract_spatiotemporal_seg_meta(struct traj_point **points, int array_size,
             meta->time_min = point->timestamp_sec;
         }
 
+        // add oid filter
+        bloom_filter_put(filter, &(point->oid), sizeof(point->oid));
     }
+    memcpy(meta->oid_filter, filter->vect->mem, meta->oid_filter_size);
+    bloom_filter_free(filter);
 }
 
 int assemble_traj_block(struct seg_meta_pair_itr *pair_array, void* block, int block_size) {
